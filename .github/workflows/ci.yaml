# This workflow just checks for delinting errors. It will run pre-commit to check for linting errors.

name: ci-delint

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  checks: read
  pull-requests: write

jobs:
  linting:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install pre-commit
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Lint with precommit
        run: |
          pre-commit run --all-files
  pytest:
    timeout-minutes: 20
    environment: ci
    env:
      GIST_ID: ${{ vars.GIST_ID}}
      CATALOGUE_BASE_URL: ${{ vars.CATALOGUE_BASE_URL }}
      GCP_MATERIALIZE_EAGER_RUN_JOB_NAME: ${{ vars.GCP_MATERIALIZE_EAGER_RUN_JOB_NAME }}
      CATALOGUE_API_KEY: ${{ secrets.CATALOGUE_API_KEY }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: install dependences
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -e .[full]

      - name: Test with pytest for coverage report
        run: |
          pytest --cov=quickrest --cov-report=json:coverage.json

      - name: show coverage report
        id: show_coverage_val
        run: |
          jq '.totals.percent_covered' coverage.json

      - name: parse coverage report
        id: extract_coverage_val
        run: |
          echo "COVERAGE=$(jq '.totals.percent_covered' coverage.json)" >> $GITHUB_ENV

      - name: substring coverage
        id: substring_coverage
        run: |
          coverage_int=$(echo "${{ env.COVERAGE }}" | cut -c 1-2)
          echo "coverage_int=$coverage_int" >> $GITHUB_OUTPUT

      - name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{vars.GIST_ID}}
          filename: eoflow-coverage-blob.json
          label: Coverage
          message: "%${{ steps.substring_coverage.outputs.coverage_int }}"
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 100
          minColorRange: 50
